{
  "info": {
    "name": "University API Benchmark - Fixed",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Generate a new randomInt for each iteration to ensure unique data for creation requests.",
          "pm.environment.set(\"randomInt\", Math.floor(Math.random() * 10000000)); // Increased range for more uniqueness",
          "console.log(\"Current randomInt: \" + pm.environment.get(\"randomInt\"));",
          "",
          "// Clear IDs at the start of a new run to ensure clean state if not clearing DB.",
          "// For repetitive runs, consider clearing environment variables as well.",
          "pm.environment.unset(\"user_id\");",
          "pm.environment.unset(\"student_id\");",
          "pm.environment.unset(\"lecturer_id\");",
          "pm.environment.unset(\"course_id\");",
          "pm.environment.unset(\"course_registration_id\");"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Users",
      "item": [
        {
          "name": "Create User",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"student_{{randomInt}}\",\n    \"email\": \"student_{{randomInt}}@example.com\",\n    \"password\": \"Password123!\",\n    \"role\": \"student\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/users/create",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "create"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201 or 200 for user creation\", () => pm.expect(pm.response.code).to.be.oneOf([200, 201]));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    let idToCapture;",
                  "    // Prioritize 'payload' for SQL backend, then 'data' for NoSQL backend, then direct ID",
                  "    if (responseJson.payload && (responseJson.payload.id || responseJson.payload._id)) {",
                  "        idToCapture = responseJson.payload.id || responseJson.payload._id;",
                  "    } else if (responseJson.data && (responseJson.data.id || responseJson.data._id)) {",
                  "        idToCapture = responseJson.data.id || responseJson.data._id;",
                  "    } else if (responseJson.id || responseJson._id) { // Fallback if ID is directly in root",
                  "        idToCapture = responseJson.id || responseJson._id;",
                  "    }",
                  "    if (idToCapture) {",
                  "        pm.environment.set(\"user_id\", idToCapture);",
                  "        pm.test(\"User ID captured successfully\", () => {",
                  "            // For SQL, ID is a number, so convert to string for .empty check, or just check for existence",
                  "            pm.expect(String(pm.environment.get(\"user_id\"))).to.not.be.empty;",
                  "        });",
                  "    } else {",
                  "        console.error(\"User creation failed or response missing ID (debug info):\", responseJson);",
                  "        pm.test(\"User ID captured successfully\", false); // Explicitly fail test if ID not captured",
                  "    }",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response or extracting user_id:\", e);",
                  "    pm.test(\"Response is valid JSON and ID is captured\", false);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST User Login",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/users/login",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"student_{{randomInt}}@example.com\",\n  \"password\": \"Password123!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test is designed to fail for the newly created user as they are not seeded with 'Password123!'",
                  "// It tests the negative login scenario (invalid credentials for a random user).",
                  "// If you want to test successful login, you'd need a separate request with seeded user credentials.",
                  "pm.test(\"Status is 400 for login failure\", () => pm.expect(pm.response.code).to.be.oneOf([400, 401]));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Login failure message indicates invalid credentials\", () => {",
                  "        pm.expect(responseJson.message).to.eql(\"Email atau password salah\");",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for login failure test:\", e);",
                  "    pm.test(\"Login failure response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET All Users",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/users"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    // Check if the response itself is an array, or if 'data' property is an array",
                  "    pm.test(\"Response is an array of users\", () => {",
                  "        const isArray = Array.isArray(responseJson) || Array.isArray(responseJson.data);",
                  "        pm.expect(isArray).to.be.true;",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Get All Users:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET User By ID",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/users/{{user_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"user_id\")) {",
                  "  pm.test(\"Skipped - No user_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null); // Skip this request",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "  const responseJson = pm.response.json();",
                  "  const actualId = responseJson.data?.id || responseJson.data?._id || responseJson.id || responseJson._id;",
                  "  const expectedId = String(pm.environment.get(\"user_id\")); // Ensure comparison is string to string",
                  "  ",
                  "  pm.test(\"Response contains a valid user object\", () => {",
                  "      pm.expect(actualId).to.exist;",
                  "      pm.expect(typeof actualId).to.be.oneOf(['string', 'number']);",
                  "  });",
                  "  pm.test(\"User ID in response matches environment variable\", () => {",
                  "    pm.expect(String(actualId)).to.eql(expectedId); // Ensure comparison is string to string",
                  "  });",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response or validating user ID:\", e);",
                  "  pm.test(\"Response is valid JSON and ID is validated\", false);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "PUT Update User",
          "request": {
            "method": "PUT",
            "url": "{{base_url}}/users/{{user_id}}",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"username\":\"updateduser_{{randomInt}}\"}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"user_id\")) {",
                  "  pm.test(\"Skipped - No user_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    const responseJson = pm.response.json();",
                  "    pm.test(\"Username updated successfully\", () => {",
                  "        const updatedUsername = responseJson.data?.username || responseJson.username || responseJson.payload?.username;",
                  "        pm.expect(updatedUsername).to.eql(\"updateduser_\" + pm.environment.get(\"randomInt\"));",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Update User:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE User",
          "request": {
            "method": "DELETE",
            "url": "{{base_url}}/users/{{user_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"user_id\")) {",
                  "  pm.test(\"Skipped - No user_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200 or 404 for delete user\", () => pm.expect(pm.response.code).to.be.oneOf([200,404]));",
                  "pm.environment.unset(\"user_id\"); // Clean up the environment variable after deletion",
                  "console.log(\"user_id unset after delete.\");"
                ]
              }
            }
          ]
        },
        {
          "name": "POST Create User - Duplicate Email (Negative Case)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"duplicate_student_{{randomInt}}\",\n    \"email\": \"student_{{randomInt}}@example.com\",\n    \"password\": \"Password123!\",\n    \"role\": \"student\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/users/create",
              "host": [
                "{{base_url}"
              ],
              "path": [
                "users",
                "create"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 400 for duplicate email\", () => pm.response.to.have.status(400));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Error message indicates duplicate email\", () => {",
                  "        pm.expect(responseJson.message).to.be.oneOf([",
                  "            \"Email sudah terdaftar\", ",
                  "            \"duplicate key value violates unique constraint \\\"users_email_key\\\"\", ",
                  "            \"E11000 duplicate key error collection: benchmarkdb.users index: email_1 dup key: { email: \\\"student_\" + pm.environment.get(\"randomInt\") + \"@example.com\\\" }\" // MongoDB specific error",
                  "        ]);",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for duplicate email test:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "POST Create User - Invalid Password (Negative Case)",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"weakpass_{{randomInt}}\",\n    \"email\": \"weakpass_{{randomInt}}@example.com\",\n    \"password\": \"short\",\n    \"role\": \"student\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{base_url}}/users/create",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "create"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 400 for invalid password\", () => pm.response.to.have.status(400));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Error message indicates invalid password\", () => {",
                  "        pm.expect(responseJson.message).to.include(\"Password harus minimal 8 karakter\");",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for invalid password test:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Students",
      "item": [
        {
          "name": "POST Create Student",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/students/create",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user_id\":\"{{user_id}}\",\"nim\":\"TEST{{randomInt}}\",\"name\":\"Test Student\",\"major\":\"Computer Science\",\"semester\":1}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Ensure user_id exists before attempting to create a student",
                  "if (!pm.environment.get(\"user_id\")) {",
                  "  pm.test(\"Skipped - No user_id environment variable set. Run 'Create User' first.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201 or 200 for student creation\", () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
                  "try {",
                  "  let responseJson = pm.response.json();",
                  "  let idToCapture;",
                  "  if (responseJson.payload && (responseJson.payload.id || responseJson.payload._id)) {",
                  "      idToCapture = responseJson.payload.id || responseJson.payload._id;",
                  "  } else if (responseJson.data && (responseJson.data.id || responseJson.data._id)) {",
                  "      idToCapture = responseJson.data.id || responseJson.data._id;",
                  "  } else if (responseJson.id || responseJson._id) {",
                  "      idToCapture = responseJson.id || responseJson._id;",
                  "  }",
                  "  if (idToCapture) {",
                  "      pm.environment.set(\"student_id\", idToCapture);",
                  "      pm.test(\"Student ID captured\", () => pm.expect(String(pm.environment.get(\"student_id\"))).to.not.be.empty);",
                  "  } else {",
                  "      console.error(\"Student creation failed or response missing ID (debug info):\", responseJson);",
                  "      pm.test(\"Student ID captured\", false);",
                  "  }",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "POST Create Student - Invalid User ID (Negative Case)",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/students/create",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"user_id\":\"invalidUserId123\",\"nim\":\"NEGTEST{{randomInt}}\",\"name\":\"Invalid Student\",\"major\":\"Computer Science\",\"semester\":1}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 400 or 404 for invalid user ID\", () => pm.expect(pm.response.code).to.be.oneOf([400, 404]));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Error message indicates invalid user ID\", () => {",
                  "        pm.expect(responseJson.message).to.be.oneOf([\"User not found\", \"invalid input syntax for type uuid\", \"Cast to ObjectId failed for value \\\"invalidUserId123\\\" at path \\\"user\\\"\", \"User not found\"]); // Added Mongoose error message and SQL generic message",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for invalid user ID test:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET All Students",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/students"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Response is an array of students\", () => {",
                  "        const isArray = Array.isArray(responseJson) || Array.isArray(responseJson.data);",
                  "        pm.expect(isArray).to.be.true;",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Get All Students:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET Student By ID",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/students/{{student_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"student_id\")) {",
                  "  pm.test(\"Skipped - No student_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "  pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "  pm.test(\"Student ID matches\", () => {",
                  "    const json = pm.response.json();",
                  "    const id = json.id || json._id || json.data?.id || json.data?._id;",
                  "    pm.expect(String(id)).to.eql(String(pm.environment.get(\"student_id\")));",
                  "  });",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT Update Student",
          "request": {
            "method": "PUT",
            "url": "{{base_url}}/students/{{student_id}}",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"major\":\"Mathematics\"}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"student_id\")) {",
                  "  pm.test(\"Skipped - No student_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    const responseJson = pm.response.json();",
                  "    pm.test(\"Major updated successfully\", () => {",
                  "        const updatedMajor = responseJson.data?.major || responseJson.major || responseJson.payload?.major;",
                  "        pm.expect(updatedMajor).to.eql(\"Mathematics\");",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Update Student:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE Student",
          "request": {
            "method": "DELETE",
            "url": "{{base_url}}/students/{{student_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"student_id\")) {",
                  "  pm.test(\"Skipped - No student_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200 or 404\", () => pm.expect(pm.response.code).to.be.oneOf([200,404]));",
                  "pm.environment.unset(\"student_id\");"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Lecturers",
      "item": [
        {
          "name": "POST Create Lecturer",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/lecturers/create",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"Dr. Smith\",\"nidn\":\"{{randomInt}}\",\"department\":\"Computer Science\"}"
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201 or 200 for lecturer creation\", () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
                  "try {",
                  "  let responseJson = pm.response.json();",
                  "  let idToCapture;",
                  "  if (responseJson.payload && (responseJson.payload.id || responseJson.payload._id)) {",
                  "      idToCapture = responseJson.payload.id || responseJson.payload._id;",
                  "  } else if (responseJson.data && (responseJson.data.id || responseJson.data._id)) {",
                  "      idToCapture = responseJson.data.id || responseJson.data._id;",
                  "  } else if (responseJson.id || responseJson._id) {",
                  "      idToCapture = responseJson.id || responseJson._id;",
                  "  }",
                  "  if (idToCapture) {",
                  "      pm.environment.set(\"lecturer_id\", idToCapture);",
                  "      pm.test(\"Lecturer ID captured\", () => pm.expect(String(pm.environment.get(\"lecturer_id\"))).to.not.be.empty);",
                  "  } else {",
                  "      console.error(\"Lecturer creation failed or response missing ID (debug info):\", responseJson);",
                  "      pm.test(\"Lecturer ID captured\", false);",
                  "  }",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET All Lecturers",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/lecturers"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Response is an array of lecturers\", () => {",
                  "        const isArray = Array.isArray(responseJson) || Array.isArray(responseJson.data);",
                  "        pm.expect(isArray).to.be.true;",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Get All Lecturers:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET Lecturer By ID",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/lecturers/{{lecturer_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"lecturer_id\")) {",
                  "  pm.test(\"Skipped - No lecturer_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "  pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "  pm.test(\"Lecturer ID matches\", () => {",
                  "    const json = pm.response.json();",
                  "    const id = json.id || json._id || json.data?.id || json.data?._id;",
                  "    pm.expect(String(id)).to.eql(String(pm.environment.get(\"lecturer_id\")));",
                  "  });",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT Update Lecturer",
          "request": {
            "method": "PUT",
            "url": "{{base_url}}/lecturers/{{lecturer_id}}",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"department\":\"Mathematics\"}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"lecturer_id\")) {",
                  "  pm.test(\"Skipped - No lecturer_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    const responseJson = pm.response.json();",
                  "    pm.test(\"Department updated successfully\", () => {",
                  "        const updatedDepartment = responseJson.data?.department || responseJson.department || responseJson.payload?.department;",
                  "        pm.expect(updatedDepartment).to.eql(\"Mathematics\");",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Update Lecturer:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE Lecturer",
          "request": {
            "method": "DELETE",
            "url": "{{base_url}}/lecturers/{{lecturer_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"lecturer_id\")) {",
                  "  pm.test(\"Skipped - No lecturer_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200 or 404\", () => pm.expect(pm.response.code).to.be.oneOf([200,404]));",
                  "pm.environment.unset(\"lecturer_id\");"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Courses",
      "item": [
        {
          "name": "POST Create Course",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/courses/create",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"course_code\":\"CS{{randomInt}}\",\"name\":\"Introduction to Computer Science\",\"credits\":3,\"semester\":1,\"lecturer_id\":\"{{lecturer_id}}\"}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"lecturer_id\")) {",
                  "  pm.test(\"Skipped - No lecturer_id environment variable set. Run 'Create Lecturer' first.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201 or 200 for course creation\", () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
                  "try {",
                  "  let responseJson = pm.response.json();",
                  "  let idToCapture;",
                  "  if (responseJson.payload && (responseJson.payload.id || responseJson.payload._id)) {",
                  "      idToCapture = responseJson.payload.id || responseJson.payload._id;",
                  "  } else if (responseJson.data && (responseJson.data.id || responseJson.data._id)) {",
                  "      idToCapture = responseJson.data.id || responseJson.data._id;",
                  "  } else if (responseJson.id || responseJson._id) {",
                  "      idToCapture = responseJson.id || responseJson._id;",
                  "  }",
                  "  if (idToCapture) {",
                  "      pm.environment.set(\"course_id\", idToCapture);",
                  "      pm.test(\"Course ID captured\", () => pm.expect(String(pm.environment.get(\"course_id\"))).to.not.be.empty);",
                  "  } else {",
                  "      console.error(\"Course creation failed or response missing ID (debug info):\", responseJson);",
                  "      pm.test(\"Course ID captured\", false);",
                  "  }",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET All Courses",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/courses"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Response is an array of courses\", () => {",
                  "        const isArray = Array.isArray(responseJson) || Array.isArray(responseJson.data);",
                  "        pm.expect(isArray).to.be.true;",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Get All Courses:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET Course By ID",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/courses/{{course_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"course_id\")) {",
                  "  pm.test(\"Skipped - No course_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "  pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "  pm.test(\"Course ID matches\", () => {",
                  "    const json = pm.response.json();",
                  "    const id = json.id || json._id || json.data?.id || json.data?._id;",
                  "    pm.expect(String(id)).to.eql(String(pm.environment.get(\"course_id\")));",
                  "  });",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT Update Course",
          "request": {
            "method": "PUT",
            "url": "{{base_url}}/courses/{{course_id}}",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"name\":\"Advanced Computer Science\"}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"course_id\")) {",
                  "  pm.test(\"Skipped - No course_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    const responseJson = pm.response.json();",
                  "    pm.test(\"Course name updated successfully\", () => {",
                  "        const updatedName = responseJson.data?.name || responseJson.name || responseJson.payload?.name;",
                  "        pm.expect(updatedName).to.eql(\"Advanced Computer Science\");",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Update Course:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE Course",
          "request": {
            "method": "DELETE",
            "url": "{{base_url}}/courses/{{course_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"course_id\")) {",
                  "  pm.test(\"Skipped - No course_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200 or 404\", () => pm.expect(pm.response.code).to.be.oneOf([200,404]));",
                  "pm.environment.unset(\"course_id\");"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Course Registrations",
      "item": [
        {
          "name": "POST Create Course Registration",
          "request": {
            "method": "POST",
            "url": "{{base_url}}/course-registrations/create",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"studentId\":\"{{student_id}}\",\"courseId\":\"{{course_id}}\",\"semester\":\"Ganjil\",\"academic_year\":\"2025\"}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"student_id\")) {",
                  "  pm.test(\"Skipped - No student_id environment variable set. Run 'Create Student' first.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}",
                  "if (!pm.environment.get(\"course_id\")) {",
                  "  pm.test(\"Skipped - No course_id environment variable set. Run 'Create Course' first.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 201 or 200 for course registration creation\", () => pm.expect(pm.response.code).to.be.oneOf([200,201]));",
                  "try {",
                  "  let responseJson = pm.response.json();",
                  "  let idToCapture;",
                  "  if (responseJson.payload && (responseJson.payload.id || responseJson.payload._id)) {",
                  "      idToCapture = responseJson.payload.id || responseJson.payload._id;",
                  "  } else if (responseJson.data && (responseJson.data.id || responseJson.data._id)) {",
                  "      idToCapture = responseJson.data.id || responseJson.data._id;",
                  "  } else if (responseJson.id || responseJson._id) {",
                  "      idToCapture = responseJson.id || responseJson._id;",
                  "  }",
                  "  if (idToCapture) {",
                  "      pm.environment.set(\"course_registration_id\", idToCapture);",
                  "      pm.test(\"Registration ID captured\", () => pm.expect(String(pm.environment.get(\"course_registration_id\"))).to.not.be.empty);",
                  "  } else {",
                  "      console.error(\"Course registration creation failed or response missing ID (debug info):\", responseJson);",
                  "      pm.test(\"Registration ID captured\", false);",
                  "  }",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET All Course Registrations",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/course-registrations"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (pm.environment.get('base_url').includes('4000')) {",
                  "  pm.request.url = pm.request.url.toString().replace('/course-registrations', '/course-registrations/all');",
                  "}",
                  "// Ensure student_id and course_id exist before attempting to get all course registrations if needed",
                  "// This is a GET, so it might not strictly depend on a single registration ID, but good to be explicit if filtering/joining is expected.",
                  "// if (!pm.environment.get(\"student_id\") || !pm.environment.get(\"course_id\")) {",
                  "//   pm.test(\"Skipped - Missing student_id or course_id environment variable.\", () => {});",
                  "//   pm.execution.setNextRequest(null);",
                  "// }"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    let responseJson = pm.response.json();",
                  "    pm.test(\"Response is an array of course registrations\", () => {",
                  "        const isArray = Array.isArray(responseJson) || Array.isArray(responseJson.data);",
                  "        pm.expect(isArray).to.be.true;",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Get All Course Registrations:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "GET Course Registration By ID",
          "request": {
            "method": "GET",
            "url": "{{base_url}}/course-registrations/{{course_registration_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"course_registration_id\")) {",
                  "  pm.test(\"Skipped - No course_registration_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "try {",
                  "  pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "  pm.test(\"Registration ID matches\", () => {",
                  "    const json = pm.response.json();",
                  "    const id = json.id || json._id || json.data?.id || json.data?._id;",
                  "    pm.expect(String(id)).to.eql(String(pm.environment.get(\"course_registration_id\")));",
                  "  });",
                  "} catch (e) {",
                  "  console.error(\"Error parsing JSON response:\", e);",
                  "  pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "PUT Update Course Registration",
          "request": {
            "method": "PUT",
            "url": "{{base_url}}/course-registrations/{{course_registration_id}}",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"semester\":\"Genap\"}"
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"course_registration_id\")) {",
                  "  pm.test(\"Skipped - No course_registration_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200\", () => pm.response.to.have.status(200));",
                  "try {",
                  "    const responseJson = pm.response.json();",
                  "    pm.test(\"Semester updated successfully\", () => {",
                  "        const updatedSemester = responseJson.data?.semester || responseJson.semester || responseJson.payload?.semester;",
                  "        pm.expect(updatedSemester).to.eql(\"Genap\");",
                  "    });",
                  "} catch (e) {",
                  "    console.error(\"Error parsing JSON response for Update Course Registration:\", e);",
                  "    pm.test(\"Response is valid JSON\", false);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "DELETE Course Registration",
          "request": {
            "method": "DELETE",
            "url": "{{base_url}}/course-registrations/{{course_registration_id}}"
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "if (!pm.environment.get(\"course_registration_id\")) {",
                  "  pm.test(\"Skipped - No course_registration_id environment variable set.\", () => {});",
                  "  pm.execution.setNextRequest(null);",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status is 200 or 404\", () => pm.expect(pm.response.code).to.be.oneOf([200,404]));",
                  "pm.environment.unset(\"course_registration_id\");"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
